#include <iostream>
using namespace std;

class heap{
    public:
        int arr[100];
        int size;
        
        heap(){
            arr[0] = -1;
            size = 0;
        }
    
    void insert(int val){
        size = size+1;
        int index = size;
        arr[index] = val;
        
        while(index > 1){
            int parent = index/2;
            if(arr[parent] < arr[index]){
                swap(arr[parent] , arr[index]);
                index = parent;
            }
            else{
                return ;
            }
        }
    }
    
    void deleteFromHeap(){
        if(size == 0){
            cout << "NOthing to delete"<< endl;
            return ;
        }
        int i =1;
        // put last element to root element
        arr[i] = arr[size];
        // remove last element
        size-- ;
        
        // take root node to its correct position
        
        while(i < size){
            int leftChild = 2*i;
            int rightChild = 2*i+1;
            
            
            if(leftChild < size && arr[i] < arr[leftChild]){
                swap(arr[i],arr[leftChild]);
                i = leftChild;
            }
            else if(rightChild < size && arr[i] < arr[rightChild]){
                swap(arr[i],arr[rightChild]);
                i = rightChild;
            }
            else{
                return;
            }
        }
    }
    void print(){
        for (int i = 1; i <= size; i++) {
            std::cout << arr[i] << " ";
        }cout << endl;
    }
};

int main()
{
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.print();
    h.deleteFromHeap();
    h.print();
    

    return 0;
}
